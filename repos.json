[
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_calamari",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_calamari\",\n  \"version\": \"0.0.1\",\n  \"tools\": {\n    \"ocrd-calamari-ocr\": {\n      \"executable\": \"ocrd-calamari-ocr\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"Recognize lines with kraken\",\n      \"parameters\": {\n        \"checkpoint\": {\"type\": \"string\", \"format\": \"file\", \"cacheable\": true},\n        \"processes\": {\"type\": \"number\", \"default\": 1},\n        \"batch_size\": {\"type\": \"number\", \"default\": 1},\n        \"voter\": {\"type\": \"string\", \"default\": \"confidence_voter_default_ctc\"},\n        \"extended_prediction_data_format\": {\"type\": \"string\", \"default\": \"json\"},\n        \"XXX output_dir\": \"TODO\",\n        \"XXX extended_prediction_data\": \"TODO\"\n      }\n    }\n  }\n}\n",
            "setup.py": null
        },
        "git": {
            "last_commit": "Thu Jul 26 19:09:07 2018 +0200",
            "number_of_commits": "2"
        },
        "name": "ocrd_calamari",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_calamari",
            "tools": {
                "ocrd-calamari-ocr": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Recognize lines with kraken",
                    "executable": "ocrd-calamari-ocr",
                    "parameters": {
                        "XXX extended_prediction_data": "TODO",
                        "XXX output_dir": "TODO",
                        "batch_size": {
                            "default": 1,
                            "type": "number"
                        },
                        "checkpoint": {
                            "cacheable": true,
                            "format": "file",
                            "type": "string"
                        },
                        "extended_prediction_data_format": {
                            "default": "json",
                            "type": "string"
                        },
                        "processes": {
                            "default": 1,
                            "type": "number"
                        },
                        "voter": {
                            "default": "confidence_voter_default_ctc",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "OCR-D/ocrd_calamari",
        "python": {
            "author": "",
            "author-email": "",
            "name": "",
            "url": ""
        },
        "url": "https://github.com/OCR-D/ocrd_calamari"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_imageconvert/\n\n> Thin wrapper around convert(1)\n\nRequires: ocrd >= 0.4.2\n\n## What it does\n\n```sh\n\n# Actual conversion\nconvert \"$infile\" \"$outfile\"\n```\n\n## What it could do\n\n[One or more of these](http://www.fmwconcepts.com/imagemagick/textcleaner/index.php) or\n[these](http://web.archive.org/web/20110517204536/http://www.ict.griffith.edu.au/anthony/graphics/imagick6/quantize/)\nor convert to grayscale, binarize etc. With threshold configurable as a\nparameter.\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_im6convert\",\n  \"version\": \"0.0.1\",\n  \"tools\": {\n\n    \"ocrd-im6convert\": {\n      \"executable\": \"ocrd-im6convert\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/binarization\"],\n      \"description\": \"Convert and transform images \",\n      \"parameters\": {\n        \"output-format\": {\n          \"type\": \"string\",\n          \"required\": true,\n          \"enum\": [\"image/tiff\", \"image/jp2\", \"image/png\"]\n        }\n      }\n    }\n\n  }\n}\n",
            "setup.py": null
        },
        "git": {
            "last_commit": "Tue Jun 26 18:30:04 2018 +0200",
            "number_of_commits": "5"
        },
        "name": "ocrd_im6convert",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_im6convert",
            "tools": {
                "ocrd-im6convert": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Convert and transform images ",
                    "executable": "ocrd-im6convert",
                    "parameters": {
                        "output-format": {
                            "enum": [
                                "image/tiff",
                                "image/jp2",
                                "image/png"
                            ],
                            "required": true,
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "OCR-D/ocrd_im6convert",
        "python": {
            "author": "",
            "author-email": "",
            "name": "",
            "url": ""
        },
        "url": "https://github.com/OCR-D/ocrd_im6convert"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_keraslm\nSimple character-based language model using keras\n",
            "ocrd-tool.json": null,
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n    - keraslm-rate\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nsetup(\n    name='ocrd_keraslm',\n    version='0.0.1',\n    description='keras language model',\n    long_description=README,\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com',\n    url='https://github.com/OCR-D/ocrd_keraslm',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=[\n        'ocrd >= 0.4.0',\n        'keras',\n        'click',\n        'numpy',\n        'tensorflow',\n    ],\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'keraslm-rate=ocrd_keraslm.scripts.run:cli',\n            'ocrd-keraslm-rate=ocrd_keraslm.wrapper.cli:ocrd_keraslm_rate',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Wed Jul 18 11:20:20 2018 +0200",
            "number_of_commits": "20"
        },
        "name": "ocrd_keraslm",
        "ocrd_tool": null,
        "org_plus_name": "OCR-D/ocrd_keraslm",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com",
            "name": "ocrd_keraslm",
            "url": "https://github.com/OCR-D/ocrd_keraslm"
        },
        "url": "https://github.com/OCR-D/ocrd_keraslm"
    },
    {
        "files": {
            "Dockerfile": "FROM ocrd/core\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\nWORKDIR /build-ocrd\nCOPY setup.py .\nCOPY requirements.txt .\nCOPY README.rst .\nRUN apt-get update && \\\n    apt-get -y install --no-install-recommends \\\n    ca-certificates \\\n    make \\\n    git\nCOPY ocrd_kraken ./ocrd_kraken\nRUN pip3 install --upgrade pip\nRUN make deps-pip install\n\nENTRYPOINT [\"/bin/sh\", \"-c\"]\n",
            "README.md": "# ocrd_kraken\n\n> Wrapper for the kraken OCR engine\n\n[![image](https://travis-ci.org/OCR-D/ocrd_kraken.svg?branch=master)](https://travis-ci.org/OCR-D/ocrd_kraken)\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/kraken.svg)](https://hub.docker.com/r/ocrd/kraken/tags/)\n[![image](https://circleci.com/gh/OCR-D/ocrd_kraken.svg?style=svg)](https://circleci.com/gh/OCR-D/ocrd_kraken)\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/OCR-D/ocrd_kraken\",\n  \"version\": \"0.0.2\",\n  \"tools\": {\n    \"ocrd-kraken-binarize\": {\n      \"executable\": \"ocrd-kraken-binarize\",\n      \"input_file_grp\": \"OCR-D-IMG\",\n      \"output_file_grp\": \"OCR-D-IMG-BIN\",\n      \"categories\": [\n        \"Image preprocessing\"\n      ],\n      \"steps\": [\n        \"preprocessing/optimization/binarization\"\n      ],\n      \"description\": \"Binarize images with kraken\",\n      \"parameters\": {\n        \"level-of-operation\": {\n          \"type\": \"string\",\n          \"default\": \"page\",\n          \"enum\": [\"page\", \"block\", \"line\"]\n        }\n      }\n    },\n    \"ocrd-kraken-segment\": {\n      \"executable\": \"ocrd-kraken-segment\",\n      \"categories\": [\n        \"Layout analysis\"\n      ],\n      \"steps\": [\n        \"layout/segmentation/region\"\n      ],\n      \"description\": \"Block segmentation with kraken\",\n      \"parameters\": {\n        \"text_direction\": {\n          \"type\": \"string\",\n          \"description\": \"Sets principal text direction\",\n          \"enum\": [\"horizontal-lr\", \"horizontal-rl\", \"vertical-lr\", \"vertical-rl\"],\n          \"default\": \"horizontal-lr\"\n        },\n        \"script_detect\": {\n          \"type\": \"boolean\",\n          \"description\": \"Enable script detection on segmenter output\",\n          \"default\": false\n        },\n        \"maxcolseps\": {\"type\": \"number\", \"format\": \"integer\", \"default\": 2},\n        \"scale\": {\"type\": \"number\", \"format\": \"float\", \"default\": null},\n        \"black_colseps\": {\"type\": \"boolean\", \"default\": false},\n        \"white_colseps\": {\"type\": \"boolean\", \"default\": false}\n      }\n    },\n    \"ocrd-kraken-ocr\": {\n      \"executable\": \"ocrd-kraken-ocr\",\n      \"categories\": [\"Text recognition and optimization\"],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ],\n      \"description\": \"OCR with kraken\",\n      \"parameters\": {\n        \"lines-json\": {\n          \"type\": \"string\",\n          \"format\": \"url\",\n          \"required\": \"true\",\n          \"description\": \"URL to line segmentation in JSON\"\n        }\n      }\n    }\n\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls two binaries:\n\n    - ocrd-kraken-binarize\n    - ocrd-kraken-segment\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='ocrd_kraken',\n    version='0.1.0',\n    description='kraken bindings',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com',\n    url='https://github.com/OCR-D/ocrd_kraken',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=[\n        'ocrd >= 1.0.0a4',\n        'kraken == 0.9.16',\n        'click >= 7',\n    ],\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-kraken-binarize=ocrd_kraken.cli:ocrd_kraken_binarize',\n            'ocrd-kraken-segment=ocrd_kraken.cli:ocrd_kraken_segment',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Thu Feb 28 10:37:14 2019 +0100",
            "number_of_commits": "80"
        },
        "name": "ocrd_kraken",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_kraken",
            "tools": {
                "ocrd-kraken-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarize images with kraken",
                    "executable": "ocrd-kraken-binarize",
                    "input_file_grp": "OCR-D-IMG",
                    "output_file_grp": "OCR-D-IMG-BIN",
                    "parameters": {
                        "level-of-operation": {
                            "default": "page",
                            "enum": [
                                "page",
                                "block",
                                "line"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                },
                "ocrd-kraken-ocr": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "OCR with kraken",
                    "executable": "ocrd-kraken-ocr",
                    "parameters": {
                        "lines-json": {
                            "description": "URL to line segmentation in JSON",
                            "format": "url",
                            "required": "true",
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-kraken-segment": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Block segmentation with kraken",
                    "executable": "ocrd-kraken-segment",
                    "parameters": {
                        "black_colseps": {
                            "default": false,
                            "type": "boolean"
                        },
                        "maxcolseps": {
                            "default": 2,
                            "format": "integer",
                            "type": "number"
                        },
                        "scale": {
                            "default": null,
                            "format": "float",
                            "type": "number"
                        },
                        "script_detect": {
                            "default": false,
                            "description": "Enable script detection on segmenter output",
                            "type": "boolean"
                        },
                        "text_direction": {
                            "default": "horizontal-lr",
                            "description": "Sets principal text direction",
                            "enum": [
                                "horizontal-lr",
                                "horizontal-rl",
                                "vertical-lr",
                                "vertical-rl"
                            ],
                            "type": "string"
                        },
                        "white_colseps": {
                            "default": false,
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                }
            },
            "version": "0.0.2"
        },
        "org_plus_name": "OCR-D/ocrd_kraken",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com",
            "name": "ocrd_kraken",
            "url": "https://github.com/OCR-D/ocrd_kraken"
        },
        "url": "https://github.com/OCR-D/ocrd_kraken"
    },
    {
        "files": {
            "Dockerfile": "FROM ocrd/core\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\nWORKDIR /build-ocrd\nCOPY setup.py .\nCOPY requirements.txt .\nCOPY README.md .\nRUN apt-get update && \\\n    apt-get -y install --no-install-recommends \\\n    ca-certificates \\\n    make \\\n    git\nCOPY ocrd_ocropy ./ocrd_ocropy\nRUN pip3 install --upgrade pip\nRUN make deps install\n\nENTRYPOINT [\"/bin/sh\", \"-c\"]\n",
            "README.md": "# ocrd_ocropy\n\n[![image](https://travis-ci.org/OCR-D/ocrd_ocropy.svg?branch=master)](https://travis-ci.org/OCR-D/ocrd_ocropy)\n\n[![Docker Automated build](https://img.shields.io/docker/automated/ocrd/ocropy.svg)](https://hub.docker.com/r/ocrd/ocropy/tags/)\n\n> Wrapper for the ocropy OCR engine\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.0.1\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_ocropy\",\n  \"tools\": {\n    \"ocrd-ocropy-segment\": {\n      \"executable\": \"ocrd-ocropy-segment\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"description\": \"Segment page\",\n      \"input_file_grp\": [\"OCR-D-IMG-BIN\"],\n      \"output_file_grp\": [\"OCR-D-SEG-LINE\"],\n      \"parameters\": {\n        \"maxcolseps\":  {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 3},\n        \"maxseps\":     {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 0},\n        \"sepwiden\":    {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 10},\n        \"csminheight\": {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 10},\n        \"csminaspect\": {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 1.1},\n        \"pad\":         {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 3},\n        \"expand\":      {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 3},\n        \"usegauss\":    {\"type\": \"boolean\",\"description\": \"has an effect\", \"default\": false},\n        \"threshold\":   {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 0.2},\n        \"noise\":       {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 8},\n        \"scale\":       {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 0.0},\n        \"hscale\":      {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 1.0},\n        \"vscale\":      {\"type\": \"number\", \"description\": \"has an effect\", \"default\": 1.0}\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls one binary:\n\n    - ocrd-ocropy-segment\n\"\"\"\nimport codecs\n\nfrom setuptools import setup\n\nsetup(\n    name='ocrd_ocropy',\n    version='0.0.3',\n    description='ocropy bindings',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='Konstantin Baierer',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com',\n    url='https://github.com/OCR-D/ocrd_ocropy',\n    license='Apache License 2.0',\n    packages=['ocrd_ocropy'],\n    install_requires=[\n        'ocrd >= 1.0.0b8',\n        'ocrd-fork-ocropy >= 1.4.0a3',\n        'click'\n    ],\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-ocropy-segment=ocrd_ocropy.cli:ocrd_ocropy_segment',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Tue Jun 11 14:51:00 2019 +0200",
            "number_of_commits": "66"
        },
        "name": "ocrd_ocropy",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_ocropy",
            "tools": {
                "ocrd-ocropy-segment": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Segment page",
                    "executable": "ocrd-ocropy-segment",
                    "input_file_grp": [
                        "OCR-D-IMG-BIN"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "csminaspect": {
                            "default": 1.1,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "csminheight": {
                            "default": 10,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "expand": {
                            "default": 3,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "hscale": {
                            "default": 1.0,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "maxcolseps": {
                            "default": 3,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "maxseps": {
                            "default": 0,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "noise": {
                            "default": 8,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "pad": {
                            "default": 3,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "scale": {
                            "default": 0.0,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "sepwiden": {
                            "default": 10,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "threshold": {
                            "default": 0.2,
                            "description": "has an effect",
                            "type": "number"
                        },
                        "usegauss": {
                            "default": false,
                            "description": "has an effect",
                            "type": "boolean"
                        },
                        "vscale": {
                            "default": 1.0,
                            "description": "has an effect",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "OCR-D/ocrd_ocropy",
        "python": {
            "author": "Konstantin Baierer",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com",
            "name": "ocrd_ocropy",
            "url": "https://github.com/OCR-D/ocrd_ocropy"
        },
        "url": "https://github.com/OCR-D/ocrd_ocropy"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_olena\n\n> Bundle olena as an OCR-D tool\n\n## Installation\n\n```\nmake build-olena\n```\n\nWill download and build olena/scribo from source\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.0.1\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_ocrevaluation\",\n  \"tools\": {\n    \"ocrd-olena-sauvola\": {\n      \"executable\": \"ocrd-olena-binarize\",\n      \"description\": \"OLENA's binarization algos for OCR-D\",\n      \"categories\": [\n        \"Image preprocessing\"\n      ],\n      \"steps\": [\n        \"preprocessing/optimization/binarization\"\n      ],\n      \"parameters\": {\n        \"impl\": {\n          \"description\": \"The name of the actual binarization algorithm\",\n          \"type\": \"string\",\n          \"required\": true,\n          \"enum\": [\"sauvola\"]\n        },\n        \"win-size\": {\n          \"description\": \"Window size\",\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 101\n        },\n        \"k\": {\n          \"description\": \"Sauvola's formulae parameter\",\n          \"format\": \"float\",\n          \"type\": \"number\",\n          \"default\": 0.34\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": null
        },
        "git": {
            "last_commit": "Mon Jun 25 11:52:38 2018 +0200",
            "number_of_commits": "13"
        },
        "name": "ocrd_olena",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_ocrevaluation",
            "tools": {
                "ocrd-olena-sauvola": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "OLENA's binarization algos for OCR-D",
                    "executable": "ocrd-olena-binarize",
                    "parameters": {
                        "impl": {
                            "description": "The name of the actual binarization algorithm",
                            "enum": [
                                "sauvola"
                            ],
                            "required": true,
                            "type": "string"
                        },
                        "k": {
                            "default": 0.34,
                            "description": "Sauvola's formulae parameter",
                            "format": "float",
                            "type": "number"
                        },
                        "win-size": {
                            "default": 101,
                            "description": "Window size",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "OCR-D/ocrd_olena",
        "python": {
            "author": "",
            "author-email": "",
            "name": "",
            "url": ""
        },
        "url": "https://github.com/OCR-D/ocrd_olena"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_segment\n\nThis repository aims to provide a number of OCR-D-compliant processors for layout analysis and evaluation.\n\n  - pattern-based segmentation aka. `ocrd-segment-via-template` (input file groups N=1, based on a PAGE template, e.g. from Aletheia, and some XSLT or Python to apply it to the input file group)\n  - data-driven segmentation aka. `ocrd-segment-via-model` (input file groups N=1, based on a statistical model, e.g. Neural Network)\n  - comparing different layout segmentations aka. `ocrd-segment-evaluate` (input file groups N = 2, compute the distance between two segmentations, e.g. automatic vs. manual)\n  - repairing of layout segmentations aka. `ocrd-segment-repair` (input file groups N >= 1, based on heuristics implemented using Shapely)\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.0.1\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_segment\",\n  \"tools\": {\n    \"ocrd-segment-repair\": {\n      \"executable\": \"ocrd-segment-repair\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Analyse and repair region segmentation\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-EVAL-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n        \"sanitize\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"Shrink and/or expand a region in such a way that it coordinates include those of all its lines\"\n        },\n        \"plausibilize\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"Modify the region segmentation to make it (more) plausible\"\n        }\n      }\n    },\n    \"ocrd-segment-evaluate\": {\n      \"executable\": \"ocrd-segment-evaluate\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Compare region segmentations\",\n      \"input_file_grp\": [\n        \"OCR-D-GT-SEG-BLOCK\",\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/analysis\"],\n      \"parameters\": {\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n\n    - ocrd-segment-repair\n    - ocrd-segment-evaluate\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='ocrd_segment',\n    version='0.0.2',\n    description='Page segmentation and segmentation evaluation',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/OCR-D/ocrd_segment',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=open('requirements.txt').read().split('\\n'),\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-segment-repair=ocrd_segment.cli:ocrd_segment_repair',\n            'ocrd-segment-evaluate=ocrd_segment.cli:ocrd_segment_evaluate',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Tue Sep 10 08:31:29 2019 +0200",
            "number_of_commits": "1"
        },
        "name": "ocrd_segment",
        "ocrd_tool": {
            "git_url": "https://github.com/OCR-D/ocrd_segment",
            "tools": {
                "ocrd-segment-evaluate": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Compare region segmentations",
                    "executable": "ocrd-segment-evaluate",
                    "input_file_grp": [
                        "OCR-D-GT-SEG-BLOCK",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {},
                    "steps": [
                        "layout/analysis"
                    ]
                },
                "ocrd-segment-repair": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Analyse and repair region segmentation",
                    "executable": "ocrd-segment-repair",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-EVAL-BLOCK"
                    ],
                    "parameters": {
                        "plausibilize": {
                            "default": false,
                            "description": "Modify the region segmentation to make it (more) plausible",
                            "type": "boolean"
                        },
                        "sanitize": {
                            "default": false,
                            "description": "Shrink and/or expand a region in such a way that it coordinates include those of all its lines",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "OCR-D/ocrd_segment",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_segment",
            "url": "https://github.com/OCR-D/ocrd_segment"
        },
        "url": "https://github.com/OCR-D/ocrd_segment"
    },
    {
        "files": {
            "Dockerfile": "FROM ocrd/core\nMAINTAINER OCR-D\nENV DEBIAN_FRONTEND noninteractive\nENV PYTHONIOENCODING utf8\nENV LC_ALL C.UTF-8\nENV LANG C.UTF-8\n\nWORKDIR /build-ocrd\nCOPY setup.py .\nCOPY requirements.txt .\nCOPY requirements_test.txt .\nCOPY README.rst .\nCOPY LICENSE .\nRUN apt-get update && \\\n    apt-get -y install --no-install-recommends \\\n    ca-certificates \\\n    make \\\n    git\nCOPY Makefile .\nRUN make deps-ubuntu\nCOPY ocrd_tesserocr ./ocrd_tesserocr\nRUN pip3 install --upgrade pip\nRUN make PYTHON=python3 PIP=pip3 deps install\nCOPY test ./test\nRUN make PYTHON=python3 PIP=pip3 deps-test\n\nENTRYPOINT [\"/bin/sh\", \"-c\"]\n",
            "README.md": null,
            "ocrd-tool.json": "{\n  \"version\": \"0.4.1\",\n  \"git_url\": \"https://github.com/OCR-D/ocrd_tesserocr\",\n  \"dockerhub\": \"ocrd/tesserocr\",\n  \"tools\": {\n    \"ocrd-tesserocr-deskew\": {\n      \"executable\": \"ocrd-tesserocr-deskew\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Deskew pages or regions\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-DESKEW-BLOCK\"\n      ],\n      \"steps\": [\"preprocessing/optimization/deskewing\"],\n      \"parameters\": {\n        \"operation_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"page\",\"region\"],\n          \"default\": \"region\",\n          \"description\": \"PAGE XML hierarchy level to operate on\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-recognize\": {\n      \"executable\": \"ocrd-tesserocr-recognize\",\n      \"categories\": [\"Text recognition and optimization\"],\n      \"description\": \"Recognize text in lines with tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-SEG-LINE\",\n        \"OCR-D-SEG-WORD\",\n        \"OCR-D-SEG-GLYPH\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-OCR-TESS\"\n      ],\n      \"steps\": [\"recognition/text-recognition\"],\n      \"parameters\": {\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\", \"word\", \"glyph\"],\n          \"default\": \"line\",\n          \"description\": \"PAGE XML hierarchy level to add the TextEquiv results to (requires existing layout annotation up to one level above that)\"\n        },\n        \"overwrite_words\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"remove existing layout and text annotation below the TextLine level (regardless of textequiv_level)\"\n        },\n        \"model\": {\n          \"type\": \"string\",\n          \"description\": \"tessdata model to apply (an ISO 639-3 language specification or some other basename, e.g. deu-frak or Fraktur)\"\n        }\n      }\n    },\n     \"ocrd-tesserocr-segment-region\": {\n      \"executable\": \"ocrd-tesserocr-segment-region\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment regions into lines with tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"steps\": [\"layout/segmentation/region\"],\n      \"parameters\": {\n        \"overwrite_regions\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"remove existing layout and text annotation below the Page level\"\n        },\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected region rectangles by this many (true) pixels\",\n          \"default\": 8\n        },\n        \"crop_polygons\": {\n          \"type\": \"boolean\",\n          \"default\": false,\n          \"description\": \"annotate polygon coordinates instead of rectangles, and create cropped AlternativeImage masked by the polygon outlines\"\n        },\n        \"find_tables\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"recognise table regions (textord_tabfind_find_tables)\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-segment-line\": {\n      \"executable\": \"ocrd-tesserocr-segment-line\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment page into regions with tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-BLOCK\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"steps\": [\"layout/segmentation/line\"],\n      \"parameters\": {\n        \"overwrite_lines\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"remove existing layout and text annotation below the TextRegion level\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-segment-word\": {\n      \"executable\": \"ocrd-tesserocr-segment-word\",\n      \"categories\": [\"Layout analysis\"],\n      \"description\": \"Segment lines into words with tesseract\",\n      \"input_file_grp\": [\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-SEG-WORD\"\n      ],\n      \"steps\": [\"layout/segmentation/word\"],\n      \"parameters\": {\n        \"overwrite_words\": {\n          \"type\": \"boolean\",\n          \"default\": true,\n          \"description\": \"remove existing layout and text annotation below the TextLine level\"\n        }\n      }\n    },\n    \"ocrd-tesserocr-crop\": {\n      \"executable\": \"ocrd-tesserocr-crop\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Poor man's cropping with tesseract\",\n      \"input_file_grp\": [\n\t\"OCR-D-IMG\"\n      ],\n      \"output_file_grp\": [\n\t\"OCR-D-IMG-CROPPED\"\n      ],\n      \"steps\": [\"preprocessing/optimization/cropping\"],\n      \"parameters\" : {\n        \"padding\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"extend detected border by this many (true) pixels on every side\",\n          \"default\": 4\n        }\n      }\n    },\n    \"ocrd-tesserocr-binarize\": {\n      \"executable\": \"ocrd-tesserocr-binarize\",\n      \"categories\": [\"Image preprocessing\"],\n      \"description\": \"Binarize pages, regions or lines\",\n      \"input_file_grp\": [\n        \"OCR-D-IMG\",\n        \"OCR-D-SEG-BLOCK\",\n        \"OCR-D-SEG-LINE\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-BIN-BLOCK\",\n        \"OCR-D-BIN-LINE\"\n      ],\n      \"steps\": [\"preprocessing/optimization/binarization\"],\n      \"parameters\": {\n        \"operation_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"region\", \"line\"],\n          \"default\": \"region\",\n          \"description\": \"PAGE XML hierarchy level to operate on\"\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls five executables:\n\n    - ocrd_tesserocr_recognize\n    - ocrd_tesserocr_segment_region\n    - ocrd_tesserocr_segment_line\n    - ocrd_tesserocr_segment_word\n    - ocrd_tesserocr_crop\n    - ocrd_tesserocr_deskew\n    - ocrd_tesserocr_binarize\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='ocrd_tesserocr',\n    version='0.4.1',\n    description='Tesserocr bindings',\n    long_description=codecs.open('README.rst', encoding='utf-8').read(),\n    author='Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky',\n    author_email='unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/OCR-D/ocrd_tesserocr',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=open('requirements.txt').read().split('\\n'),\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-tesserocr-recognize=ocrd_tesserocr.cli:ocrd_tesserocr_recognize',\n            'ocrd-tesserocr-segment-region=ocrd_tesserocr.cli:ocrd_tesserocr_segment_region',\n            'ocrd-tesserocr-segment-line=ocrd_tesserocr.cli:ocrd_tesserocr_segment_line',\n            'ocrd-tesserocr-segment-word=ocrd_tesserocr.cli:ocrd_tesserocr_segment_word',\n            'ocrd-tesserocr-crop=ocrd_tesserocr.cli:ocrd_tesserocr_crop',\n            'ocrd-tesserocr-deskew=ocrd_tesserocr.cli:ocrd_tesserocr_deskew',\n            'ocrd-tesserocr-binarize=ocrd_tesserocr.cli:ocrd_tesserocr_binarize',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Wed Aug 21 18:39:05 2019 +0200",
            "number_of_commits": "237"
        },
        "name": "ocrd_tesserocr",
        "ocrd_tool": {
            "dockerhub": "ocrd/tesserocr",
            "git_url": "https://github.com/OCR-D/ocrd_tesserocr",
            "tools": {
                "ocrd-tesserocr-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarize pages, regions or lines",
                    "executable": "ocrd-tesserocr-binarize",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-BIN-BLOCK",
                        "OCR-D-BIN-LINE"
                    ],
                    "parameters": {
                        "operation_level": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "region",
                                "line"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                },
                "ocrd-tesserocr-crop": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Poor man's cropping with tesseract",
                    "executable": "ocrd-tesserocr-crop",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-CROPPED"
                    ],
                    "parameters": {
                        "padding": {
                            "default": 4,
                            "description": "extend detected border by this many (true) pixels on every side",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/cropping"
                    ]
                },
                "ocrd-tesserocr-deskew": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Deskew pages or regions",
                    "executable": "ocrd-tesserocr-deskew",
                    "input_file_grp": [
                        "OCR-D-IMG",
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-DESKEW-BLOCK"
                    ],
                    "parameters": {
                        "operation_level": {
                            "default": "region",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/deskewing"
                    ]
                },
                "ocrd-tesserocr-recognize": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Recognize text in lines with tesseract",
                    "executable": "ocrd-tesserocr-recognize",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK",
                        "OCR-D-SEG-LINE",
                        "OCR-D-SEG-WORD",
                        "OCR-D-SEG-GLYPH"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-TESS"
                    ],
                    "parameters": {
                        "model": {
                            "description": "tessdata model to apply (an ISO 639-3 language specification or some other basename, e.g. deu-frak or Fraktur)",
                            "type": "string"
                        },
                        "overwrite_words": {
                            "default": false,
                            "description": "remove existing layout and text annotation below the TextLine level (regardless of textequiv_level)",
                            "type": "boolean"
                        },
                        "textequiv_level": {
                            "default": "line",
                            "description": "PAGE XML hierarchy level to add the TextEquiv results to (requires existing layout annotation up to one level above that)",
                            "enum": [
                                "region",
                                "line",
                                "word",
                                "glyph"
                            ],
                            "type": "string"
                        }
                    },
                    "steps": [
                        "recognition/text-recognition"
                    ]
                },
                "ocrd-tesserocr-segment-line": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment page into regions with tesseract",
                    "executable": "ocrd-tesserocr-segment-line",
                    "input_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "parameters": {
                        "overwrite_lines": {
                            "default": true,
                            "description": "remove existing layout and text annotation below the TextRegion level",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-tesserocr-segment-region": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment regions into lines with tesseract",
                    "executable": "ocrd-tesserocr-segment-region",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-BLOCK"
                    ],
                    "parameters": {
                        "crop_polygons": {
                            "default": false,
                            "description": "annotate polygon coordinates instead of rectangles, and create cropped AlternativeImage masked by the polygon outlines",
                            "type": "boolean"
                        },
                        "find_tables": {
                            "default": true,
                            "description": "recognise table regions (textord_tabfind_find_tables)",
                            "type": "boolean"
                        },
                        "overwrite_regions": {
                            "default": true,
                            "description": "remove existing layout and text annotation below the Page level",
                            "type": "boolean"
                        },
                        "padding": {
                            "default": 8,
                            "description": "extend detected region rectangles by this many (true) pixels",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/region"
                    ]
                },
                "ocrd-tesserocr-segment-word": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Segment lines into words with tesseract",
                    "executable": "ocrd-tesserocr-segment-word",
                    "input_file_grp": [
                        "OCR-D-SEG-LINE"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-WORD"
                    ],
                    "parameters": {
                        "overwrite_words": {
                            "default": true,
                            "description": "remove existing layout and text annotation below the TextLine level",
                            "type": "boolean"
                        }
                    },
                    "steps": [
                        "layout/segmentation/word"
                    ]
                }
            },
            "version": "0.4.1"
        },
        "org_plus_name": "OCR-D/ocrd_tesserocr",
        "python": {
            "author": "Konstantin Baierer, Kay-Michael W\u00fcrzner, Robert Sachunsky",
            "author-email": "unixprog@gmail.com, wuerzner@gmail.com, sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_tesserocr",
            "url": "https://github.com/OCR-D/ocrd_tesserocr"
        },
        "url": "https://github.com/OCR-D/ocrd_tesserocr"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# Document Preprocessing and Segmentation\n\n[![CircleCI](https://circleci.com/gh/mjenckel/OCR-D-LAYoutERkennung.svg?style=svg)](https://circleci.com/gh/mjenckel/OCR-D-LAYoutERkennung)\n\n> Tools for preprocessing scanned images for OCR\n\n# Installing\n\nTo install anyBaseOCR dependencies system-wide:\n\n    $ sudo pip install .\n\nAlternatively, dependencies can be installed into a Virtual Environment:\n\n    $ virtualenv venv\n    $ source venv/bin/activate\n    $ pip install -e .\n\n## Tools included\n\nTo see how to run binarization, deskew, crop and dewarp, text/non-text segmentation and textline segmentation methods, please follow corresponding below files for a detailed description :\n\n   * [README_binarize.md](https://github.com/mjenckel/OCR-D-LAYoutERkennung/tree/master/docs/README_binarize.md) instruction for binarization method\n   * [README_deskew.md](https://github.com/mjenckel/OCR-D-LAYoutERkennung/tree/master/docs/README_deskew.md) instruction for deskew method\n   * [README_cropping.md](https://github.com/mjenckel/OCR-D-LAYoutERkennung/tree/master/docs/README_cropping.md) instruction for cropping method\n   * [README_dewarp.md](https://github.com/mjenckel/OCR-D-LAYoutERkennung/tree/master/docs/README_dewarp.md) instruction for dewarp method\n   * [README_tiseg.md](https://github.com/mjenckel/OCR-D-LAYoutERkennung/tree/master/docs/README_tigseg.md) instruction for text/non-text segmentation method\n   * [README_textline.md](https://github.com/mjenckel/OCR-D-LAYoutERkennung/tree/master/docs/README_textline.md) instruction for textline segmentation method\n\n## Binarizer\n\n### Method Behaviour \n This function takes a scanned colored /gray scale document image as input and do the black and white binarize image.\n \n #### Usage:\n```sh\nocrd-anybaseocr-binarize -m (path to METs input file) -I (Input group name) -O (Output group name) [-p (path to parameter file) -o (METs output filename)]\n```\n\n#### Example: \n```sh\nocrd-anybaseocr-binarize \\\n   -m mets.xml \\\n   -I OCR-D-IMG \\\n   -O OCR-D-IMG-BIN\n```\n\n## Deskewer\n\n### Method Behaviour \n This function takes a document image as input and do the skew correction of that document.\n \n #### Usage:\n```sh\nocrd-anybaseocr-deskew -m (path to METs input file) -I (Input group name) -O (Output group name) [-p (path to parameter file) -o (METs output filename)]\n```\n\n#### Example: \n```sh\nocrd-anybaseocr-deskew \\\n  -m mets.xml \\\n  -I OCR-D-IMG-BIN \\\n  -O OCR-D-IMG-DESKEW\n```\n\n## Cropper\n\n### Method Behaviour \n This function takes a document image as input and crops/selects the page content area only (that's mean remove textual noise as well as any other noise around page content area)\n \n #### Usage:\n```sh\nocrd-anybaseocr-cropping -m (path to METs input file) -I (Input group name) -O (Output group name) [-p (path to parameter file) -o (METs output filename)]\n```\n\n#### Example: \n```sh\nocrd-anybaseocr-cropping \\\n   -m mets.xml \\\n   -I OCR-D-IMG-DESKEW \\\n   -O OCR-D-IMG-CROP\n```\n\n\n## Dewarper\n\n### Method Behaviour \n This function takes a document image as input and make the text line straight if its curved.\n \n #### Usage:\n```sh\nocrd-anybaseocr-dewarp -m (path to METs input file) -I (Input group name) -O (Output group name) [-p (path to parameter file) -o (METs output filename)]\n```\n\n\n#### Example: \n```sh\nCUDA_VISIBLE_DEVICES=0 ocrd-anybaseocr-dewarp \\\n   -m mets.xml \\\n   -I OCR-D-IMG-CROP \\\n   -O OCR-D-IMG-DEWARP\n   -p params.json \n```\n\n## Text/Non-Text Segmenter\n\n### Method Behaviour \n This function takes a document image as an input and separates the text and non-text part from the input document image.\n \n #### Usage:\n```sh\nocrd-anybaseocr-tiseg -m (path to METs input file) -I (Input group name) -O (Output group name) [-p (path to parameter file) -o (METs output filename)]\n```\n\n#### Example: \n```sh\nocrd-anybaseocr-tiseg \\\n\t-m mets.xml \\\n\t-I OCR-D-IMG-CROP \\\n\t-O OCR-D-IMG-TISEG\n```\n\n## Textline Segmenter\n\n### Method Behaviour \n This function takes a cropped document image as an input and segment the image into textline images.\n \n #### Usage:\n```sh\nocrd-anybaseocr-textline -m (path to METs input file) -I (Input group name) -O (Output group name) [-p (path to parameter file) -o (METs output filename)]\n```\n\n#### Example: \n```sh\nocrd-anybaseocr-textline \\\n\t-m mets.xml \\\n\t-I OCR-D-IMG-TISEG \\\n\t-O OCR-D-IMG-TL\n```\n\n\n## Testing\n\nTo test the tools, download [OCR-D/assets](https://github.com/OCR-D/assets). In\nparticular, the code is tested with the\n[dfki-testdata](https://github.com/OCR-D/assets/tree/master/data/dfki-testdata)\ndataset.\n\nRun `make test` to run all tests.\n\n## License\n\n\n```\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n ```\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/mjenckel/LAYoutERkennung/\",\n  \"version\": \"0.0.1\",\n  \"tools\": {\n    \"ocrd-anybaseocr-binarize\": {\n      \"executable\": \"ocrd-anybaseocr-binarize\",\n      \"description\": \"Binarize images with the algorithm from ocropy\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/binarization\"],\n      \"input_file_grp\": [\"OCR-D-IMG\"],\n      \"output_file_grp\": [\"OCR-D-IMG-BIN\"],\n      \"parameters\": {\n        \"nocheck\":         {\"type\": \"boolean\",                     \"default\": false, \"description\": \"disable error checking on inputs\"},\n        \"show\":            {\"type\": \"boolean\",                     \"default\": false, \"description\": \"display final results\"},\n        \"raw_copy\":        {\"type\": \"boolean\",                     \"default\": false, \"description\": \"also copy the raw image\"},\n        \"gray\":            {\"type\": \"boolean\",                     \"default\": false, \"description\": \"force grayscale processing even if image seems binary\"},\n        \"bignore\":         {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.1,   \"description\": \"ignore this much of the border for threshold estimation\"},\n        \"debug\":           {\"type\": \"number\", \"format\": \"integer\", \"default\": 0,     \"description\": \"display intermediate results\"},\n        \"escale\":          {\"type\": \"number\", \"format\": \"float\",   \"default\": 1.0,   \"description\": \"scale for estimating a mask over the text region\"},\n        \"hi\":              {\"type\": \"number\", \"format\": \"float\",   \"default\": 90,    \"description\": \"percentile for white estimation\"},\n        \"lo\":              {\"type\": \"number\", \"format\": \"float\",   \"default\": 5,     \"description\": \"percentile for black estimation\"},\n        \"perc\":            {\"type\": \"number\", \"format\": \"float\",   \"default\": 80,    \"description\": \"percentage for filters\"},\n        \"range\":           {\"type\": \"number\", \"format\": \"integer\", \"default\": 20,    \"description\": \"range for filters\"},\n        \"threshold\":       {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.5,   \"description\": \"threshold, determines lightness\"},\n        \"zoom\":            {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.5,   \"description\": \"zoom for page background estimation, smaller=faster\"},\n        \"operation_level\": {\"type\": \"string\", \"enum\": [\"page\",\"region\", \"line\"], \"default\": \"page\",\"description\": \"PAGE XML hierarchy level to operate on\"}\n      }\n    },\n    \"ocrd-anybaseocr-deskew\": {\n      \"executable\": \"ocrd-anybaseocr-deskew\",\n      \"description\": \"Deskew images with the algorithm from ocropy\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/deskewing\"],\n      \"input_file_grp\": [\"OCR-D-IMG-BIN\"],\n      \"output_file_grp\": [\"OCR-D-IMG-DESKEW\"],\n      \"parameters\": {\n        \"escale\":    {\"type\": \"number\", \"format\": \"float\",   \"default\": 1.0, \"description\": \"scale for estimating a mask over the text region\"},\n        \"bignore\":   {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.1, \"description\": \"ignore this much of the border for threshold estimation\"},\n        \"threshold\": {\"type\": \"number\", \"format\": \"float\",   \"default\": 0.5, \"description\": \"threshold, determines lightness\"},\n        \"maxskew\":   {\"type\": \"number\", \"format\": \"float\",   \"default\": 1.0, \"description\": \"skew angle estimation parameters (degrees)\"},\n        \"skewsteps\": {\"type\": \"number\", \"format\": \"integer\", \"default\": 8,   \"description\": \"steps for skew angle estimation (per degree)\"},\n        \"debug\":     {\"type\": \"number\", \"format\": \"integer\", \"default\": 0,   \"description\": \"display intermediate results\"},\n        \"parallel\":  {\"type\": \"number\", \"format\": \"integer\", \"default\": 0,   \"description\": \"???\"},\n        \"lo\":        {\"type\": \"number\", \"format\": \"integer\", \"default\": 5,   \"description\": \"percentile for black estimation\"},\n        \"hi\":        {\"type\": \"number\", \"format\": \"integer\", \"default\": 90,   \"description\": \"percentile for white estimation\"},\n        \"operation_level\": {\"type\": \"string\", \"enum\": [\"page\",\"region\", \"line\"], \"default\": \"page\",\"description\": \"PAGE XML hierarchy level to operate on\"}\n      }\n    },\n    \"ocrd-anybaseocr-crop\": {\n      \"executable\": \"ocrd-anybaseocr-crop\",\n      \"description\": \"Image crop using non-linear processing\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/cropping\"],\n      \"input_file_grp\": [\"OCR-D-IMG-DESKEW\"],\n      \"output_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"parameters\": {\n        \"colSeparator\":  {\"type\": \"number\", \"format\": \"float\", \"default\": 0.04, \"description\": \"consider space between column. 25% of width\"},\n        \"maxRularArea\":  {\"type\": \"number\", \"format\": \"float\", \"default\": 0.3, \"description\": \"Consider maximum rular area\"},\n        \"minArea\":       {\"type\": \"number\", \"format\": \"float\", \"default\": 0.05, \"description\": \"rular position in below\"},\n        \"minRularArea\":  {\"type\": \"number\", \"format\": \"float\", \"default\": 0.01, \"description\": \"Consider minimum rular area\"},\n        \"positionBelow\": {\"type\": \"number\", \"format\": \"float\", \"default\": 0.75, \"description\": \"rular position in below\"},\n        \"positionLeft\":  {\"type\": \"number\", \"format\": \"float\", \"default\": 0.4, \"description\": \"rular position in left\"},\n        \"positionRight\": {\"type\": \"number\", \"format\": \"float\", \"default\": 0.6, \"description\": \"rular position in right\"},\n        \"rularRatioMax\": {\"type\": \"number\", \"format\": \"float\", \"default\": 10.0, \"description\": \"rular position in below\"},\n        \"rularRatioMin\": {\"type\": \"number\", \"format\": \"float\", \"default\": 3.0, \"description\": \"rular position in below\"},\n        \"rularWidth\":    {\"type\": \"number\", \"format\": \"float\", \"default\": 0.95, \"description\": \"maximum rular width\"},\n        \"operation_level\": {\"type\": \"string\", \"enum\": [\"page\",\"region\", \"line\"], \"default\": \"page\",\"description\": \"PAGE XML hierarchy level to operate on\"}\n      }\n    },\n    \"ocrd-anybaseocr-dewarp\": {\n      \"executable\": \"ocrd-anybaseocr-dewarp\",\n      \"description\": \"dewarp image with anyBaseOCR\",\n      \"categories\": [\"Image preprocessing\"],\n      \"steps\": [\"preprocessing/optimization/dewarping\"],\n      \"input_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"output_file_grp\": [\"OCR-D-IMG-DEWARP\"],\n      \"parameters\": {\n        \"imgresize\":    { \"type\": \"string\",                      \"default\": \"resize_and_crop\", \"description\": \"run on original size image\"},\n        \"pix2pixHD\":    { \"type\": \"string\",                      \"required\": true, \"description\": \"Path to pix2pixHD library\"},\n        \"gpu_id\":       { \"type\": \"number\", \"format\": \"integer\", \"default\": 0,    \"description\": \"gpu id\"},\n        \"resizeHeight\": { \"type\": \"number\", \"format\": \"integer\", \"default\": 1024, \"description\": \"resized image height\"},\n        \"resizeWidth\":  { \"type\": \"number\", \"format\": \"integer\", \"default\": 1024, \"description\": \"resized image width\"}\n      }\n    },\n    \"ocrd-anybaseocr-tiseg\": {\n      \"executable\": \"ocrd-anybaseocr-tiseg\",\n      \"input_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"output_file_grp\": [\"OCR-D-SEG-TISEG\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/text-image\"],\n      \"description\": \"separate text and non-text part with anyBaseOCR\",\n      \"parameters\": {\n      }\n    },\n    \"ocrd-anybaseocr-textline\": {\n      \"executable\": \"ocrd-anybaseocr-textline\",\n      \"input_file_grp\": [\"OCR-D-SEG-TISEG\"],\n      \"output_file_grp\": [\"OCR-D-SEG-LINE-ANY\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/line\"],\n      \"description\": \"separate each text line\",\n      \"parameters\": {\n        \"minscale\":    {\"type\": \"number\", \"format\": \"float\", \"default\": 12.0, \"description\": \"minimum scale permitted\"},\n        \"maxlines\":    {\"type\": \"number\", \"format\": \"float\", \"default\": 300, \"description\": \"non-standard scaling of horizontal parameters\"},\n        \"scale\":       {\"type\": \"number\", \"format\": \"float\", \"default\": 0.0, \"description\": \"the basic scale of the document (roughly, xheight) 0=automatic\"},\n        \"hscale\":      {\"type\": \"number\", \"format\": \"float\", \"default\": 1.0, \"description\": \"non-standard scaling of horizontal parameters\"},\n        \"vscale\":      {\"type\": \"number\", \"format\": \"float\", \"default\": 1.7, \"description\": \"non-standard scaling of vertical parameters\"},\n        \"threshold\":   {\"type\": \"number\", \"format\": \"float\", \"default\": 0.2, \"description\": \"baseline threshold\"},\n        \"noise\":       {\"type\": \"number\", \"format\": \"integer\", \"default\": 8, \"description\": \"noise threshold for removing small components from lines\"},\n        \"usegauss\":    {\"type\": \"boolean\", \"default\": false, \"description\": \"use gaussian instead of uniform\"},\n        \"maxseps\":     {\"type\": \"number\", \"format\": \"integer\", \"default\": 2, \"description\": \"maximum black column separators\"},\n        \"sepwiden\":    {\"type\": \"number\", \"format\": \"integer\", \"default\": 10, \"description\": \"widen black separators (to account for warping)\"},\n        \"blackseps\":   {\"type\": \"boolean\", \"default\": false, \"description\": \"also check for black column separators\"},\n        \"maxcolseps\":  {\"type\": \"number\", \"format\": \"integer\", \"default\": 2, \"description\": \"maximum # whitespace column separators\"},\n        \"csminaspect\": {\"type\": \"number\", \"format\": \"float\", \"default\": 1.1, \"description\": \"minimum aspect ratio for column separators\"},\n        \"csminheight\": {\"type\": \"number\", \"format\": \"float\", \"default\": 6.5, \"description\": \"minimum column height (units=scale)\"},\n        \"pad\":         {\"type\": \"number\", \"format\": \"integer\", \"default\": 3, \"description\": \"padding for extracted lines\"},\n        \"expand\":      {\"type\": \"number\", \"format\": \"integer\", \"default\": 3, \"description\": \"expand mask for grayscale extraction\"},\n        \"parallel\":    {\"type\": \"number\", \"format\": \"integer\", \"default\": 0, \"description\": \"number of CPUs to use\"},\n        \"libpath\":     {\"type\": \"string\", \"default\": \".\", \"description\": \"Library Path for C Executables\"}\n      }\n    },\n    \"ocrd-anybaseocr-layout-analysis\": {\n      \"executable\": \"ocrd-anybaseocr-layout-analysis\",\n      \"input_file_grp\": [\"OCR-D-IMG-CROP\"],\n      \"output_file_grp\": [\"OCR-D-SEG-LAYOUT\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/text-image\"],\n      \"description\": \"Analysis of the input document\",\n      \"parameters\": {\n        \"batch_size\":         {\"type\": \"number\", \"format\": \"integer\", \"default\": 4, \"description\": \"Batch size for generating test images\"},\n        \"model_path\":         { \"type\": \"string\",                     \"required\": true, \"description\": \"Path to Layout Structure Classification Model\"},\n        \"class_mapping_path\": { \"type\": \"string\",                     \"required\": true, \"description\": \"Path to Layout Structure Classes\"}\n      }\n    },\n    \"ocrd-anybaseocr-block-segmentation\": {\n      \"executable\": \"ocrd-anybaseocr-block-segmentation\",\n      \"input_file_grp\": [\"OCR-D-IMG\"],\n      \"output_file_grp\": [\"OCR-D-BLOCK-SEGMENT\"],\n      \"categories\": [\"Layout analysis\"],\n      \"steps\": [\"layout/segmentation/text-image\"],\n      \"description\": \"Analysis of the input document\",\n      \"parameters\": {        \n        \"block_segmentation_model\":   { \"type\": \"string\",                     \"required\": true, \"description\": \"Path to Layout Structure Classification Model\"},\n        \"block_segmentation_weights\": { \"type\": \"string\",                     \"required\": true, \"description\": \"Path to Layout Structure Classes\"}\n      }\n    }       \n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='ocrd-anybaseocr',\n    version='v0.0.1',\n    author=\"DFKI\",\n    author_email=\"Saqib.Bukhari@dfki.de, Mohammad_mohsin.reza@dfki.de\",\n    url=\"https://github.com/mjenckel/LAYoutERkennung\",\n    license='Apache License 2.0',\n    long_description=open('README.md').read(),\n    long_description_content_type='text/markdown',\n    install_requires=open('requirements.txt').read().split('\\n'),\n    packages=find_packages(exclude=[\"work_dir\", \"src\"]),\n    package_data={\n        '': ['*.json']\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-anybaseocr-binarize           = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_binarize',\n            'ocrd-anybaseocr-deskew             = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_deskew',\n            'ocrd-anybaseocr-crop               = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_cropping',        \n            'ocrd-anybaseocr-dewarp             = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_dewarp',\n            'ocrd-anybaseocr-tiseg              = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_tiseg',\n            'ocrd-anybaseocr-textline           = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_textline',\n            'ocrd-anybaseocr-layout-analysis    = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_layout_analysis',\n            'ocrd-anybaseocr-block-segmentation = ocrd_anybaseocr.cli.cli:ocrd_anybaseocr_block_segmentation'\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Thu Sep 26 17:20:39 2019 +0200",
            "number_of_commits": "1"
        },
        "name": "LAYoutERkennung",
        "ocrd_tool": {
            "git_url": "https://github.com/mjenckel/LAYoutERkennung/",
            "tools": {
                "ocrd-anybaseocr-binarize": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Binarize images with the algorithm from ocropy",
                    "executable": "ocrd-anybaseocr-binarize",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-BIN"
                    ],
                    "parameters": {
                        "bignore": {
                            "default": 0.1,
                            "description": "ignore this much of the border for threshold estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "debug": {
                            "default": 0,
                            "description": "display intermediate results",
                            "format": "integer",
                            "type": "number"
                        },
                        "escale": {
                            "default": 1.0,
                            "description": "scale for estimating a mask over the text region",
                            "format": "float",
                            "type": "number"
                        },
                        "gray": {
                            "default": false,
                            "description": "force grayscale processing even if image seems binary",
                            "type": "boolean"
                        },
                        "hi": {
                            "default": 90,
                            "description": "percentile for white estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "lo": {
                            "default": 5,
                            "description": "percentile for black estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "nocheck": {
                            "default": false,
                            "description": "disable error checking on inputs",
                            "type": "boolean"
                        },
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "perc": {
                            "default": 80,
                            "description": "percentage for filters",
                            "format": "float",
                            "type": "number"
                        },
                        "range": {
                            "default": 20,
                            "description": "range for filters",
                            "format": "integer",
                            "type": "number"
                        },
                        "raw_copy": {
                            "default": false,
                            "description": "also copy the raw image",
                            "type": "boolean"
                        },
                        "show": {
                            "default": false,
                            "description": "display final results",
                            "type": "boolean"
                        },
                        "threshold": {
                            "default": 0.5,
                            "description": "threshold, determines lightness",
                            "format": "float",
                            "type": "number"
                        },
                        "zoom": {
                            "default": 0.5,
                            "description": "zoom for page background estimation, smaller=faster",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/binarization"
                    ]
                },
                "ocrd-anybaseocr-block-segmentation": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Analysis of the input document",
                    "executable": "ocrd-anybaseocr-block-segmentation",
                    "input_file_grp": [
                        "OCR-D-IMG"
                    ],
                    "output_file_grp": [
                        "OCR-D-BLOCK-SEGMENT"
                    ],
                    "parameters": {
                        "block_segmentation_model": {
                            "description": "Path to Layout Structure Classification Model",
                            "required": true,
                            "type": "string"
                        },
                        "block_segmentation_weights": {
                            "description": "Path to Layout Structure Classes",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "steps": [
                        "layout/segmentation/text-image"
                    ]
                },
                "ocrd-anybaseocr-crop": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Image crop using non-linear processing",
                    "executable": "ocrd-anybaseocr-crop",
                    "input_file_grp": [
                        "OCR-D-IMG-DESKEW"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "parameters": {
                        "colSeparator": {
                            "default": 0.04,
                            "description": "consider space between column. 25% of width",
                            "format": "float",
                            "type": "number"
                        },
                        "maxRularArea": {
                            "default": 0.3,
                            "description": "Consider maximum rular area",
                            "format": "float",
                            "type": "number"
                        },
                        "minArea": {
                            "default": 0.05,
                            "description": "rular position in below",
                            "format": "float",
                            "type": "number"
                        },
                        "minRularArea": {
                            "default": 0.01,
                            "description": "Consider minimum rular area",
                            "format": "float",
                            "type": "number"
                        },
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "positionBelow": {
                            "default": 0.75,
                            "description": "rular position in below",
                            "format": "float",
                            "type": "number"
                        },
                        "positionLeft": {
                            "default": 0.4,
                            "description": "rular position in left",
                            "format": "float",
                            "type": "number"
                        },
                        "positionRight": {
                            "default": 0.6,
                            "description": "rular position in right",
                            "format": "float",
                            "type": "number"
                        },
                        "rularRatioMax": {
                            "default": 10.0,
                            "description": "rular position in below",
                            "format": "float",
                            "type": "number"
                        },
                        "rularRatioMin": {
                            "default": 3.0,
                            "description": "rular position in below",
                            "format": "float",
                            "type": "number"
                        },
                        "rularWidth": {
                            "default": 0.95,
                            "description": "maximum rular width",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/cropping"
                    ]
                },
                "ocrd-anybaseocr-deskew": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "Deskew images with the algorithm from ocropy",
                    "executable": "ocrd-anybaseocr-deskew",
                    "input_file_grp": [
                        "OCR-D-IMG-BIN"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-DESKEW"
                    ],
                    "parameters": {
                        "bignore": {
                            "default": 0.1,
                            "description": "ignore this much of the border for threshold estimation",
                            "format": "float",
                            "type": "number"
                        },
                        "debug": {
                            "default": 0,
                            "description": "display intermediate results",
                            "format": "integer",
                            "type": "number"
                        },
                        "escale": {
                            "default": 1.0,
                            "description": "scale for estimating a mask over the text region",
                            "format": "float",
                            "type": "number"
                        },
                        "hi": {
                            "default": 90,
                            "description": "percentile for white estimation",
                            "format": "integer",
                            "type": "number"
                        },
                        "lo": {
                            "default": 5,
                            "description": "percentile for black estimation",
                            "format": "integer",
                            "type": "number"
                        },
                        "maxskew": {
                            "default": 1.0,
                            "description": "skew angle estimation parameters (degrees)",
                            "format": "float",
                            "type": "number"
                        },
                        "operation_level": {
                            "default": "page",
                            "description": "PAGE XML hierarchy level to operate on",
                            "enum": [
                                "page",
                                "region",
                                "line"
                            ],
                            "type": "string"
                        },
                        "parallel": {
                            "default": 0,
                            "description": "???",
                            "format": "integer",
                            "type": "number"
                        },
                        "skewsteps": {
                            "default": 8,
                            "description": "steps for skew angle estimation (per degree)",
                            "format": "integer",
                            "type": "number"
                        },
                        "threshold": {
                            "default": 0.5,
                            "description": "threshold, determines lightness",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/deskewing"
                    ]
                },
                "ocrd-anybaseocr-dewarp": {
                    "categories": [
                        "Image preprocessing"
                    ],
                    "description": "dewarp image with anyBaseOCR",
                    "executable": "ocrd-anybaseocr-dewarp",
                    "input_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "output_file_grp": [
                        "OCR-D-IMG-DEWARP"
                    ],
                    "parameters": {
                        "gpu_id": {
                            "default": 0,
                            "description": "gpu id",
                            "format": "integer",
                            "type": "number"
                        },
                        "imgresize": {
                            "default": "resize_and_crop",
                            "description": "run on original size image",
                            "type": "string"
                        },
                        "pix2pixHD": {
                            "description": "Path to pix2pixHD library",
                            "required": true,
                            "type": "string"
                        },
                        "resizeHeight": {
                            "default": 1024,
                            "description": "resized image height",
                            "format": "integer",
                            "type": "number"
                        },
                        "resizeWidth": {
                            "default": 1024,
                            "description": "resized image width",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "preprocessing/optimization/dewarping"
                    ]
                },
                "ocrd-anybaseocr-layout-analysis": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "Analysis of the input document",
                    "executable": "ocrd-anybaseocr-layout-analysis",
                    "input_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LAYOUT"
                    ],
                    "parameters": {
                        "batch_size": {
                            "default": 4,
                            "description": "Batch size for generating test images",
                            "format": "integer",
                            "type": "number"
                        },
                        "class_mapping_path": {
                            "description": "Path to Layout Structure Classes",
                            "required": true,
                            "type": "string"
                        },
                        "model_path": {
                            "description": "Path to Layout Structure Classification Model",
                            "required": true,
                            "type": "string"
                        }
                    },
                    "steps": [
                        "layout/segmentation/text-image"
                    ]
                },
                "ocrd-anybaseocr-textline": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "separate each text line",
                    "executable": "ocrd-anybaseocr-textline",
                    "input_file_grp": [
                        "OCR-D-SEG-TISEG"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-LINE-ANY"
                    ],
                    "parameters": {
                        "blackseps": {
                            "default": false,
                            "description": "also check for black column separators",
                            "type": "boolean"
                        },
                        "csminaspect": {
                            "default": 1.1,
                            "description": "minimum aspect ratio for column separators",
                            "format": "float",
                            "type": "number"
                        },
                        "csminheight": {
                            "default": 6.5,
                            "description": "minimum column height (units=scale)",
                            "format": "float",
                            "type": "number"
                        },
                        "expand": {
                            "default": 3,
                            "description": "expand mask for grayscale extraction",
                            "format": "integer",
                            "type": "number"
                        },
                        "hscale": {
                            "default": 1.0,
                            "description": "non-standard scaling of horizontal parameters",
                            "format": "float",
                            "type": "number"
                        },
                        "libpath": {
                            "default": ".",
                            "description": "Library Path for C Executables",
                            "type": "string"
                        },
                        "maxcolseps": {
                            "default": 2,
                            "description": "maximum # whitespace column separators",
                            "format": "integer",
                            "type": "number"
                        },
                        "maxlines": {
                            "default": 300,
                            "description": "non-standard scaling of horizontal parameters",
                            "format": "float",
                            "type": "number"
                        },
                        "maxseps": {
                            "default": 2,
                            "description": "maximum black column separators",
                            "format": "integer",
                            "type": "number"
                        },
                        "minscale": {
                            "default": 12.0,
                            "description": "minimum scale permitted",
                            "format": "float",
                            "type": "number"
                        },
                        "noise": {
                            "default": 8,
                            "description": "noise threshold for removing small components from lines",
                            "format": "integer",
                            "type": "number"
                        },
                        "pad": {
                            "default": 3,
                            "description": "padding for extracted lines",
                            "format": "integer",
                            "type": "number"
                        },
                        "parallel": {
                            "default": 0,
                            "description": "number of CPUs to use",
                            "format": "integer",
                            "type": "number"
                        },
                        "scale": {
                            "default": 0.0,
                            "description": "the basic scale of the document (roughly, xheight) 0=automatic",
                            "format": "float",
                            "type": "number"
                        },
                        "sepwiden": {
                            "default": 10,
                            "description": "widen black separators (to account for warping)",
                            "format": "integer",
                            "type": "number"
                        },
                        "threshold": {
                            "default": 0.2,
                            "description": "baseline threshold",
                            "format": "float",
                            "type": "number"
                        },
                        "usegauss": {
                            "default": false,
                            "description": "use gaussian instead of uniform",
                            "type": "boolean"
                        },
                        "vscale": {
                            "default": 1.7,
                            "description": "non-standard scaling of vertical parameters",
                            "format": "float",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "layout/segmentation/line"
                    ]
                },
                "ocrd-anybaseocr-tiseg": {
                    "categories": [
                        "Layout analysis"
                    ],
                    "description": "separate text and non-text part with anyBaseOCR",
                    "executable": "ocrd-anybaseocr-tiseg",
                    "input_file_grp": [
                        "OCR-D-IMG-CROP"
                    ],
                    "output_file_grp": [
                        "OCR-D-SEG-TISEG"
                    ],
                    "parameters": {},
                    "steps": [
                        "layout/segmentation/text-image"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "mjenckel/LAYoutERkennung",
        "python": {
            "author": "DFKI",
            "author-email": "Saqib.Bukhari@dfki.de, Mohammad_mohsin.reza@dfki.de",
            "name": "ocrd-anybaseocr",
            "url": "https://github.com/mjenckel/LAYoutERkennung"
        },
        "url": "https://github.com/mjenckel/LAYoutERkennung"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# page-segmentation module for OCRd\n\n## Requirements\n\n- For GPU-Support: [CUDA](https://developer.nvidia.com/cuda-downloads) and [CUDNN](https://developer.nvidia.com/cudnn)\n- other requirements are installed via Makefile / pip, see `requirements.txt`\n  in repository root and in `page-segmentation` submodule.\n\n## Setup\n\n```bash\nmake dep\n# or\nmake dep-gpu\n```\n\nthen\n\n```sh\nmake install\n```\n\n## Running\n\nThe main script is `ocrd-pc-seg-process`. It takes two parameters: a `--model` for the\npixel classifier and an `--image`, which must be a binarized image. For example\nwith the included model:\n\n```\nocrd-pc-seg-process --pc_model model/narren_dta02_eval_normaldh_maskfix_03 \\\n    --image abel_leibmedicus_1699_0007.bin.png\n```\n\nThis creates a folder with the basename of the image (e.g. `abel_leibmedicus_1699_0007/`)\nwith line images in `segmentation/${basename}_${paragraph_nr}_paragraph` and\nPageXML in `segmentation/clip_${filename}.xml` (where `$filename` is the input\nfile name,`$basename` is `$filename` without extensions, `$paragraph_nr` is\nsuccessive ocropus pagagraph number).\n",
            "ocrd-tool.json": null,
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls binaries:\n    - ocropus-gpageseg-with-coords\n    - ocrd-pc-seg-process\n    - ocrd-pc-seg-single\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='ocrd_pc_segmentation',\n    version='0.1.0',\n    description='pixel-classifier based page segmentation',\n    long_description=codecs.open('README.md', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    author='Alexander Gehrke, Christian Reul, Christoph Wick',\n    author_email='alexander.gehrke@uni-wuerzburg.de, christian.reul@uni-wuerzburg.de, christoph.wick@uni-wuerzburg.de',\n    url='https://github.com/ocr-d-modul-2-segmentierung/segmentation-runner',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=open(\"requirements.txt\").read().split(),\n    extras_require={\n        'tf_cpu': ['page-segmentation[tf_cpu]>=0.0.1'],\n        'tf_gpu': ['page-segmentation[tf_gpu]>=0.0.1'],\n    },\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'ocrd-pc-seg-single=ocrd_pc_segmentation.pc_segmentation:main',\n            'ocrd-pc-seg-process=ocrd_pc_segmentation.seg_process:main',\n        ]\n    },\n    scripts=['ocrd_pc_segmentation/ocropus-gpageseg-with-coords'],\n)\n"
        },
        "git": {
            "last_commit": "Fri Mar 29 16:48:09 2019 +0100",
            "number_of_commits": "1"
        },
        "name": "segmentation-runner",
        "ocrd_tool": null,
        "org_plus_name": "ocr-d-modul-2-segmentierung/segmentation-runner",
        "python": {
            "author": "Alexander Gehrke, Christian Reul, Christoph Wick",
            "author-email": "alexander.gehrke@uni-wuerzburg.de, christian.reul@uni-wuerzburg.de, christoph.wick@uni-wuerzburg.de",
            "name": "ocrd_pc_segmentation",
            "url": "https://github.com/ocr-d-modul-2-segmentierung/segmentation-runner"
        },
        "url": "https://github.com/ocr-d-modul-2-segmentierung/segmentation-runner"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# cor-asv-fst\n    OCR post-correction with error/lexicon Finite State Transducers and\n    chararacter-level LSTM language models\n\n## Introduction\n\n\n## Installation\n\nRequired Ubuntu packages:\n\n* Python (``python`` or ``python3``)\n* pip (``python-pip`` or ``python3-pip``)\n* virtualenv (``python-virtualenv`` or ``python3-virtualenv``)\n\nCreate and activate a virtualenv as usual.\n\nTo install Python dependencies and this module, then do:\n```shell\nmake deps install\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements.txt\npip install -e .\n```\n\nIn addition to the requirements listed in `requirements.txt`, the tool\nrequires the\n[pynini](http://www.opengrm.org/twiki/bin/view/GRM/Pynini)\nlibrary, which has to be installed from source.\n\n## Usage\n\nThe package has two user interfaces:\n\n### Command Line Interface\n\nThe package contains a suite of CLI tools to work with plaintext data (prefix:\n`cor-asv-fst-*`). The minimal working examples and data formats are described\nbelow. Additionally, each tool has further optional parameters - for a detailed\ndescription, call the tool with the `--help` option.\n\n#### `cor-asv-fst-train`\n\nTrain FST models. The basic invocation is as follows:\n\n```shell\ncor-asv-fst-train -l LEXICON_FILE -e ERROR_MODEL_FILE -t TRAINING_FILE\n```\n\nThis will create two transducers, which will be stored in `LEXICON_FILE` and\n`ERROR_MODEL_FILE`, respectively. As the training of the lexicon and the error\nmodel is done independently, any of them can be skipped by omitting the\nrespective parameter.\n\n`TRAINING_FILE` is a plain text file in tab-separated, two-column format\ncontaining a line of OCR-output and the corresponding ground truth line:\n\n```\n\u00bb Bergebt mir, da\u00df ih niht wei\u00df, wie\t\u00bbVergebt mir, da\u00df ich nicht wei\u00df, wie\naus dem (Gei\u017fte aller Nationen Mahrunq\taus dem Gei\u017fte aller Nationen Nahrung\nKann\u017ft Du mir die re<h\u00e9e Bahn nich\u00e9 zeigen ?\tKann\u017ft Du mir die rechte Bahn nicht zeigen?\nfrag zu bringen. \u2014\ttrag zu bringen. \u2014\n\u017fie ins irdij<he Leben hinein, Mit leichtem,\t\u017fie ins irdi\u017fche Leben hinein. Mit leichtem,\n```\n\nEach line is treated independently. Alternatively to the above, the training\ndata may also be supplied as two files:\n\n```shell\ncor-asv-fst-train -l LEXICON_FILE -e ERROR_MODEL_FILE -i INPUT_FILE -g GT_FILE\n```\n\nIn this variant, `INPUT_FILE` and `GT_FILE` are both in tab-separated,\ntwo-column format, in which the first column is the line ID and the second the\nline:\n\n```\n>=== INPUT_FILE ===<\nalexis_ruhe01_1852_0018_022     ih denke. Aber was die \u017felige Frau Geheimr\u00e4th1n\nalexis_ruhe01_1852_0035_019     \u201eDas fann ich niht, c\u2019esl absolument impos-\nalexis_ruhe01_1852_0087_027     rend. In dem Augenbli> war 1hr niht wohl zu\nalexis_ruhe01_1852_0099_012     \u00fcr die fle \u017fich \u017fchlugen.\u201c\nalexis_ruhe01_1852_0147_009     \u017follte. Nur \u00dcber die Familien, wo man \u017fie einf\u00fchren\n\n>=== GT_FILE ===<\nalexis_ruhe01_1852_0018_022     ich denke. Aber was die \u017felige Frau Geheimr\u00e4thin\nalexis_ruhe01_1852_0035_019     \u201eDas kann ich nicht, c'est absolument impos\u2014\nalexis_ruhe01_1852_0087_027     rend. Jn dem Augenblick war ihr nicht wohl zu\nalexis_ruhe01_1852_0099_012     f\u00fcr die \u017fie \u017fich \u017fchlugen.\u201c\nalexis_ruhe01_1852_0147_009     \u017follte. Nur \u00fcber die Familien, wo man \u017fie einf\u00fchren\n```\n\n#### `cor-asv-fst-process`\n\nThis tool applies a trained model to correct plaintext data on a line basis.\nThe basic invocation is:\n\n```shell\ncor-asv-fst-process -i INPUT_FILE -o OUTPUT_FILE -l LEXICON_FILE -e ERROR_MODEL_FILE (-m LM_FILE)\n```\n\n`INPUT_FILE` is in the same format as for the training procedure. `OUTPUT_FILE`\ncontains the post-correction results in the same format.\n\n`LM_FILE` is a `ocrd_keraslm` language model - if supplied, it is used for\nrescoring.\n\n#### `cor-asv-fst-evaluate`\n\nThis tool can be used to evaluate the post-correction results. The minimal\nworking invocation is:\n\n```shell\ncor-asv-fst-evaluate -i INPUT_FILE -o OUTPUT_FILE -g GT_FILE\n```\n\nAdditionally, the parameter `-M` can be used to select the evaluation measure\n(`Levenshtein` by default). The files should be in the same two-column format\nas described above.\n\n### [OCR-D processor](https://github.com/OCR-D/core) interface `ocrd-cor-asv-fst-process`\n\nTo be used with [PageXML](https://www.primaresearch.org/tools/PAGELibraries)\ndocuments in an [OCR-D](https://github.com/OCR-D/spec/) annotation workflow.\nInput could be anything with a textual annotation (`TextEquiv` on the given\n`textequiv_level`).\n\n...\n\n```json\n  \"tools\": {\n    \"cor-asv-fst-process\": {\n      \"executable\": \"cor-asv-fst-process\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/post-correction\"\n      ],\n      \"description\": \"Improve text annotation by FST error and lexicon model with character-level LSTM language model\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-ASV\"\n      ],\n      \"parameters\": {\n        \"keraslm_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for language model trained with keraslm\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"errorfst_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/vnd.openfst\",\n          \"description\": \"path of FST file for error model\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"lexiconfst_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/vnd.openfst\",\n          \"description\": \"path of FST file for lexicon model\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"word\", \"glyph\"],\n          \"default\": \"glyph\",\n          \"description\": \"PAGE XML hierarchy level to read TextEquiv input on (output will always be word level)\"\n        },\n        \"beam_width\": {\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"description\": \"maximum number of best partial paths to consider during beam search in language modelling\",\n          \"default\": 100\n        },\n        \"lm_weight\": {\n          \"type\": \"number\",\n          \"format\": \"float\",\n          \"description\": \"share of the LM scores over the FST output confidences\",\n          \"default\": 0.5\n        }\n      }\n    }\n  }\n```\n\n...\n\n## Testing\n\n...\n",
            "ocrd-tool.json": null,
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n    - cor-asv-fst-train\n    - cor-asv-fst-process\n    - cor-asv-fst-evaluate\n    - ocrd-cor-asv-fst-process\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\ninstall_requires = open('requirements.txt').read().split('\\n')\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nsetup(\n    name='ocrd_cor_asv_fst',\n    version='0.2.0',\n    description='OCR post-correction with error/lexicon Finite State '\n                'Transducers and character-level LSTMs',\n    long_description=README,\n    author='Maciej Sumalvico, Robert Sachunsky',\n    author_email='sumalvico@informatik.uni-leipzig.de, '\n                 'sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/ASVLeipzig/cor-asv-fst',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=install_requires,\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    test_suite='tests',\n    entry_points={\n        'console_scripts': [\n            'cor-asv-fst-train=ocrd_cor_asv_fst.scripts.train:main',\n            'cor-asv-fst-process=ocrd_cor_asv_fst.scripts.process:main',\n            'cor-asv-fst-evaluate=ocrd_cor_asv_fst.scripts.evaluate:main',\n            'ocrd-cor-asv-fst-process=ocrd_cor_asv_fst.wrapper.cli:ocrd_cor_asv_fst',\n        ]\n    }\n)\n"
        },
        "git": {
            "last_commit": "Tue Jul 23 17:00:16 2019 +0200",
            "number_of_commits": "1"
        },
        "name": "cor-asv-fst",
        "ocrd_tool": null,
        "org_plus_name": "ASVLeipzig/cor-asv-fst",
        "python": {
            "author": "Maciej Sumalvico, Robert Sachunsky",
            "author-email": "sumalvico@informatik.uni-leipzig.de, sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_cor_asv_fst",
            "url": "https://github.com/ASVLeipzig/cor-asv-fst"
        },
        "url": "https://github.com/ASVLeipzig/cor-asv-fst"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# cor-asv-ann\n    OCR post-correction with encoder-attention-decoder LSTMs\n\n## Introduction\n\nThis is a tool for automatic OCR _post-correction_ (reducing optical character recognition errors) with recurrent neural networks. It uses sequence-to-sequence transduction on the _character level_ with a model architecture akin to neural machine translation, i.e. a stacked **encoder-decoder** network with attention mechanism. \n\nThe **attention model** always applies to full lines (in a _global_ configuration), and uses a linear _additive_ alignment model. (This transfers information between the encoder and decoder hidden layer states, and calculates a _soft alignment_ between input and output characters. It is imperative for character-level processing, because with a simple final-initial transfer, models tend to start \"forgetting\" the input altogether at some point in the line and behave like unconditional LM generators.)\n\n...FIXME: mention: \n- stacked architecture (with bidirectional bottom and attentional top), configurable depth/width\n- weight tying\n- underspecification and gap\n- confidence input and alternative input\n- CPU/GPU option\n- incremental training, LM transfer, shallow transfer\n- evaluation (CER, PPL)\n\n### Processing PAGE annotations\n\nWhen applied on PAGE-XML (as OCR-D workspace processor), this component also allows processing below the `TextLine` hierarchy level, i.e. on `Word` or `Glyph` level. For that it uses the soft alignment scores to calculate an optimal hard alignment path for characters, and thereby distributes the transduction onto the lower level elements (keeping their coordinates and other meta-data), while changing Word segmentation if necessary.\n\n...\n\n### Architecture\n\n...FIXME: show!\n\n### Input with confidence and/or alternatives\n\n...FIXME: explain!\n\n### Multi-OCR input\n\nnot yet!\n\n### Modes\n\nWhile the _encoder_ can always be run in parallel over a batch of lines and by passing the full sequence of characters in one tensor (padded to the longest line in the batch), which is very efficient with Keras backends like Tensorflow, a **beam-search** _decoder_ requires passing initial/final states character-by-character, with parallelism employed to capture multiple history hypotheses of a single line. However, one can also **greedily** use the best output only for each position (without beam search). And in doing so, another option is to feed back the softmax output directly into the decoder input instead of its argmax unit vector. This effectively passes the full probability distribution from state to state, which (not very surprisingly) can increase correction accuracy quite a lot \u2013 it can get as good as a medium-sized beam search results. This latter option also allows to run in parallel again, which is also much faster \u2013 consuming up to ten times less CPU time.\n\nThererfore, the backend function `lib.Sequence2Sequence.correct_lines` can operate the encoder-decoder network in either of the following modes:\n\n#### _fast_\n\nDecode greedily, but feeding back the full softmax distribution in batch mode.\n\n#### _greedy_\n\nDecode greedily, but feeding back the argmax unit vectors for each line separately.\n\n#### _default_\n\nDecode beamed, feeding back the argmax unit vectors for the best history/output hypotheses of each line. More specifically:\n\n> Start decoder with start-of-sequence, then keep decoding until\n> end-of-sequence is found or output length is way off, repeatedly.\n> Decode by using the best predicted output characters and several next-best\n> alternatives (up to some degradation threshold) as next input.\n> Follow-up on the N best overall candidates (estimated by accumulated\n> score, normalized by length and prospective cost), i.e. do A*-like\n> breadth-first search, with N equal `batch_size`.\n> Pass decoder initial/final states from character to character,\n> for each candidate respectively.\n> Reserve 1 candidate per iteration for running through `source_seq`\n> (as a rejection fallback) to ensure that path does not fall off the\n> beam and at least one solution can be found within the search limits.\n\n### Evaluation\n\nText lines can be compared (by aligning and computing a distance under some metric) across multiple inputs. (This would typically be GT and OCR vs post-correction.) This can be done both on plain text files (`cor-asv-ann-eval`) and PAGE-XML annotations (`ocrd-cor-asv-ann-evaluate`).\n\nThere are a number of distance metrics available:\n- `Levenshtein`: simple unweighted edit distance (fastest, standard)\n- `combining-e-umlauts`: like the former, but umlauts with combining letter e get smaller distance to precomposed umlauts (and vice versa), as in \"Wu\u0364\u017fte\" (as opposed to \"W\u00fc\u017fte\")\n- `historic_latin`: like the former, but with additional exceptions (i.e. zero distances) for certain (isolated) character confusions \u2013 roughly the difference between GT level 1 and 2\n- `NFC`: like `Levenshtein`, but apply Unicode normal form with canonical composition before (i.e. less than `historic_latin`)\n- `NFKC`: like `Levenshtein`, but apply Unicode normal form with compatibility composition before (i.e. more than `historic_latin`)\n\n\n## Installation\n\nRequired Ubuntu packages:\n\n* Python (``python`` or ``python3``)\n* pip (``python-pip`` or ``python3-pip``)\n* virtualenv (``python-virtualenv`` or ``python3-virtualenv``)\n\nCreate and activate a virtualenv as usual.\n\nTo install Python dependencies and this module, then do:\n```shell\nmake deps install\n```\nWhich is the equivalent of:\n```shell\npip install -r requirements.txt\npip install -e .\n```\n\n## Usage\n\nThis packages has the following user interfaces:\n\n### command line interface `cor-asv-ann-train`\n\nTo be used with string arguments and plain-text files.\n\n...\n\n### command line interface `cor-asv-ann-eval`\n\nTo be used with string arguments and plain-text files.\n\n...\n\n### command line interface `cor-asv-ann-repl`\n\ninteractive\n\n...\n\n### [OCR-D processor](https://github.com/OCR-D/core) interface `ocrd-cor-asv-ann-process`\n\nTo be used with [PageXML](https://www.primaresearch.org/tools/PAGELibraries) documents in an [OCR-D](https://github.com/OCR-D/spec/) annotation workflow. Input could be anything with a textual annotation (`TextEquiv` on the given `textequiv_level`). \n\n...\n\n```json\n    \"ocrd-cor-asv-ann-process\": {\n      \"executable\": \"ocrd-cor-asv-ann-process\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/post-correction\"\n      ],\n      \"description\": \"Improve text annotation by character-level encoder-attention-decoder ANN model\",\n      \"input_file_grp\": [\n        \"OCR-D-OCR-TESS\",\n        \"OCR-D-OCR-KRAK\",\n        \"OCR-D-OCR-OCRO\",\n        \"OCR-D-OCR-CALA\",\n        \"OCR-D-OCR-ANY\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-COR-ASV\"\n      ],\n      \"parameters\": {\n        \"model_file\": {\n          \"type\": \"string\",\n          \"format\": \"uri\",\n          \"content-type\": \"application/x-hdf;subtype=bag\",\n          \"description\": \"path of h5py weight/config file for model trained with cor-asv-ann-train\",\n          \"required\": true,\n          \"cacheable\": true\n        },\n        \"textequiv_level\": {\n          \"type\": \"string\",\n          \"enum\": [\"line\", \"word\", \"glyph\"],\n          \"default\": \"glyph\",\n          \"description\": \"PAGE XML hierarchy level to read/write TextEquiv input/output on\"\n        }\n      }\n    }\n```\n\n...\n\n### [OCR-D processor](https://github.com/OCR-D/core) interface `ocrd-cor-asv-ann-evaluate`\n\nTo be used with [PageXML](https://www.primaresearch.org/tools/PAGELibraries) documents in an [OCR-D](https://github.com/OCR-D/spec/) annotation workflow. Inputs could be anything with a textual annotation (`TextEquiv` on the line level), but at least 2. The first in the list of input file groups will be regarded as reference/GT.\n\n...\n\n```json\n    \"ocrd-cor-asv-ann-evaluate\": {\n      \"executable\": \"ocrd-cor-asv-ann-evaluate\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/evaluation\"\n      ],\n      \"description\": \"Align different textline annotations and compute distance\",\n      \"parameters\": {\n        \"metric\": {\n          \"type\": \"string\",\n          \"enum\": [\"Levenshtein\", \"combining-e-umlauts\", \"NFC\", \"NFKC\", \"historic_latin\"],\n          \"default\": \"Levenshtein\",\n          \"description\": \"Distance metric to calculate and aggregate\"\n        }\n      }\n    }\n```\n\n...\n\n## Testing\n\nnot yet!\n...\n",
            "ocrd-tool.json": null,
            "setup.py": "# -*- coding: utf-8 -*-\n\"\"\"\nInstalls:\n    - cor-asv-ann-train\n    - cor-asv-ann-eval\n    - cor-asv-ann-repl\n    - ocrd-cor-asv-ann-process\n    - ocrd-cor-asv-ann-evaluate\n\"\"\"\nimport codecs\n\nfrom setuptools import setup, find_packages\n\ninstall_requires = open('requirements.txt').read().split('\\n')\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nsetup(\n    name='ocrd_cor_asv_ann',\n    version='0.1.1',\n    description='sequence-to-sequence translator for noisy channel error correction',\n    long_description=README,\n    author='Robert Sachunsky',\n    author_email='sachunsky@informatik.uni-leipzig.de',\n    url='https://github.com/ASVLeipzig/cor-asv-ann',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    install_requires=install_requires,\n    package_data={\n        '': ['*.json', '*.yml', '*.yaml'],\n    },\n    entry_points={\n        'console_scripts': [\n            'cor-asv-ann-train=ocrd_cor_asv_ann.scripts.train:cli',\n            'cor-asv-ann-eval=ocrd_cor_asv_ann.scripts.eval:cli',\n            'cor-asv-ann-repl=ocrd_cor_asv_ann.scripts.repl:cli',\n            'ocrd-cor-asv-ann-process=ocrd_cor_asv_ann.wrapper.cli:ocrd_cor_asv_ann_process',\n            'ocrd-cor-asv-ann-evaluate=ocrd_cor_asv_ann.wrapper.cli:ocrd_cor_asv_ann_evaluate',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Fri Jul 19 23:53:14 2019 +0200",
            "number_of_commits": "1"
        },
        "name": "cor-asv-ann",
        "ocrd_tool": null,
        "org_plus_name": "ASVLeipzig/cor-asv-ann",
        "python": {
            "author": "Robert Sachunsky",
            "author-email": "sachunsky@informatik.uni-leipzig.de",
            "name": "ocrd_cor_asv_ann",
            "url": "https://github.com/ASVLeipzig/cor-asv-ann"
        },
        "url": "https://github.com/ASVLeipzig/cor-asv-ann"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": null,
            "ocrd-tool.json": null,
            "setup.py": null
        },
        "git": {
            "last_commit": "",
            "number_of_commits": ""
        },
        "name": "ocrd-postcorrection",
        "ocrd_tool": null,
        "org_plus_name": "cisocrgroup/ocrd-postcorrection",
        "python": {
            "author": "",
            "author-email": "",
            "name": "",
            "url": ""
        },
        "url": "https://github.com/cisocrgroup/ocrd-postcorrection"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "# ocrd_typegroups_classifier\n\n> Typegroups classifier for OCR\n\n## Quick setup\n\nIf needed, create a virtual environment for Python 3 (it was tested\nsuccessfully with Python 3.7), activate it, and install ocrd.\n\n```sh\nvirtualenv -p python3 ocrd-venv3\nsource ocrd-venv3/bin/activate\npip3 install ocrd\n```\n\nEnter in the folder containing the tool:\n```cd ocrd_typegroups_classifier/```\n\nInstall the module and its dependencies\n\n```\nmake install\nmake deps\n```\n\nFinally, run the test:\n\n```\nsh test/test.sh\n```\n\n** Important: ** The test makes sure that the system does work. For\nspeed reasons, a very small neural network is used and applied only to\nthe top-left corner of the image, therefore the quality of the results\nwill be of poor quality.\n\n## Models\n\nThe model classifier-1.tgc is based on a ResNet-18, with less neurons\nper layer than the usual model. It was briefly trained on 12 classes:\nAdornment, Antiqua, Bastarda, Book covers and other irrelevant data,\nEmpty Pages, Fraktur, Griechisch, Hebr\u00e4isch, Kursiv, Rotunda, Textura,\nand Woodcuts - Engravings.\n\n## Performance\n\nThe smaller the `stride`, the longer the runtime, the more accurate the\nresult are.\n\n\n",
            "ocrd-tool.json": "{\n  \"version\": \"0.0.1\",\n  \"git_url\": \"https://github.com/seuretm/ocrd_typegroups_classifier\",\n  \"tools\": {\n    \"ocrd-typegroups-classifier\": {\n      \"executable\": \"ocrd-typegroups-classifier\",\n      \"description\": \"Classification of 15th century type groups\",\n      \"categories\": [\n        \"Text recognition and optimization\"\n      ],\n      \"steps\": [\n        \"recognition/font-identification\"\n      ],\n      \"parameters\": {\n        \"network\": {\n          \"description\": \"The file name of the neural network to use, including sufficient path information\",\n          \"type\": \"string\",\n          \"required\": true\n        },\n        \"stride\": {\n          \"description\": \"Stride applied to the CNN on the image. Should be between 1 and 224. Smaller values increase the computation time.\",\n          \"type\": \"number\",\n          \"format\": \"integer\",\n          \"default\": 112\n        }\n      }\n    }\n  }\n}\n",
            "setup.py": "# -*- coding: utf-8 -*-\nimport codecs\n\nfrom setuptools import setup, find_packages\n\nwith codecs.open('README.md', encoding='utf-8') as f:\n    README = f.read()\n\nsetup(\n    name='ocrd_typegroups_classifier',\n    version='0.0.1',\n    description='Typegroups classifier for OCR',\n    long_description=README,\n    long_description_content_type='text/markdown',\n    author='Matthias Seuret, Konstantin Baierer',\n    author_email='seuretm@users.noreply.github.com',\n    url='https://github.com/seuretm/ocrd_typegroups_classifier',\n    license='Apache License 2.0',\n    packages=find_packages(exclude=('tests', 'docs')),\n    include_package_data=True,\n    install_requires=[\n        'click',\n        'ocrd >= 1.0.0b7',\n        'pandas',\n        'Pillow >= 5.3.0',\n        'scikit-image',\n        'torch',\n        'torchvision',\n    ],\n    package_data={\n        '': ['*.json', '*.tgc'],\n    },\n    entry_points={\n        'console_scripts': [\n            'typegroups-classifier=ocrd_typegroups_classifier.cli.simple:cli',\n            'ocrd-typegroups-classifier=ocrd_typegroups_classifier.cli.ocrd_cli:cli',\n        ]\n    },\n)\n"
        },
        "git": {
            "last_commit": "Sun Mar 24 18:35:45 2019 +0100",
            "number_of_commits": "33"
        },
        "name": "ocrd_typegroups_classifier",
        "ocrd_tool": {
            "git_url": "https://github.com/seuretm/ocrd_typegroups_classifier",
            "tools": {
                "ocrd-typegroups-classifier": {
                    "categories": [
                        "Text recognition and optimization"
                    ],
                    "description": "Classification of 15th century type groups",
                    "executable": "ocrd-typegroups-classifier",
                    "parameters": {
                        "network": {
                            "description": "The file name of the neural network to use, including sufficient path information",
                            "required": true,
                            "type": "string"
                        },
                        "stride": {
                            "default": 112,
                            "description": "Stride applied to the CNN on the image. Should be between 1 and 224. Smaller values increase the computation time.",
                            "format": "integer",
                            "type": "number"
                        }
                    },
                    "steps": [
                        "recognition/font-identification"
                    ]
                }
            },
            "version": "0.0.1"
        },
        "org_plus_name": "seuretm/ocrd_typegroups_classifier",
        "python": {
            "author": "Matthias Seuret, Konstantin Baierer",
            "author-email": "seuretm@users.noreply.github.com",
            "name": "ocrd_typegroups_classifier",
            "url": "https://github.com/seuretm/ocrd_typegroups_classifier"
        },
        "url": "https://github.com/seuretm/ocrd_typegroups_classifier"
    },
    {
        "files": {
            "Dockerfile": null,
            "README.md": "dinglehopper\n============\n\ndinglehopper is an OCR evaluation tool and reads [ALTO](https://github.com/altoxml), [PAGE](https://github.com/PRImA-Research-Lab/PAGE-XML) and text files.\n\n[![Build Status](https://travis-ci.org/qurator-spk/dinglehopper.svg?branch=master)](https://travis-ci.org/qurator-spk/dinglehopper)\n\nGoals\n-----\n* Useful\n  * As an UI tool\n  * For an automated evaluation\n  * As a library\n* Unicode support\n\nUsage\n-----\n~~~\ndinglehopper some-document.gt.page.xml some-document.ocr.alto.xml\n~~~\nThis generates `report.html` and `report.json`.\n\n\nAs a OCR-D processor:\n~~~\nocrd-dinglehopper -m mets.xml -I OCR-D-GT-PAGE,OCR-D-OCR-TESS -O OCR-D-OCR-TESS-EVAL\n~~~\nThis generates HTML and JSON reports in the `OCR-D-OCR-TESS-EVAL` filegroup.\n\n\n![dinglehopper displaying metrics and character differences](.screenshots/dinglehopper.png?raw=true)\n",
            "ocrd-tool.json": "{\n  \"git_url\": \"https://github.com/qurator-spk/dinglehopper\",\n  \"tools\": {\n    \"ocrd-dinglehopper\": {\n      \"executable\": \"ocrd-dinglehopper\",\n      \"description\": \"Evaluate OCR text against ground truth with dinglehopper\",\n      \"input_file_grp\": [\n        \"OCR-D-GT-PAGE\",\n        \"OCR-D-OCR\"\n      ],\n      \"output_file_grp\": [\n        \"OCR-D-OCR-EVAL\"\n      ],\n      \"steps\": [\n        \"recognition/text-recognition\"\n      ]\n    }\n  }\n}\n",
            "setup.py": "from io import open\nfrom setuptools import find_packages, setup\n\nwith open('requirements.txt') as fp:\n    install_requires = fp.read()\n\nsetup(\n    name='dinglehopper',\n    author='Mike Gerber, The QURATOR SPK Team',\n    author_email='mike.gerber@sbb.spk-berlin.de, qurator@sbb.spk-berlin.de',\n    description='The OCR evaluation tool',\n    long_description=open('README.md', 'r', encoding='utf-8').read(),\n    long_description_content_type='text/markdown',\n    keywords='qurator ocr',\n    license='Apache',\n    namespace_packages=['qurator'],\n    packages=find_packages(exclude=['*.tests', '*.tests.*', 'tests.*', 'tests']),\n    install_requires=install_requires,\n    package_data={\n        '': ['*.json', 'templates/*'],\n    },\n    entry_points={\n      'console_scripts': [\n        'dinglehopper=qurator.dinglehopper.cli:main',\n        'ocrd-dinglehopper=qurator.dinglehopper.ocrd_cli:ocrd_dinglehopper',\n      ]\n    }\n)\n"
        },
        "git": {
            "last_commit": "Tue Oct 1 13:18:12 2019 +0200",
            "number_of_commits": "1"
        },
        "name": "dinglehopper",
        "ocrd_tool": {
            "git_url": "https://github.com/qurator-spk/dinglehopper",
            "tools": {
                "ocrd-dinglehopper": {
                    "description": "Evaluate OCR text against ground truth with dinglehopper",
                    "executable": "ocrd-dinglehopper",
                    "input_file_grp": [
                        "OCR-D-GT-PAGE",
                        "OCR-D-OCR"
                    ],
                    "output_file_grp": [
                        "OCR-D-OCR-EVAL"
                    ],
                    "steps": [
                        "recognition/text-recognition"
                    ]
                }
            }
        },
        "org_plus_name": "qurator-spk/dinglehopper",
        "python": {
            "author": "Mike Gerber, The QURATOR SPK Team",
            "author-email": "mike.gerber@sbb.spk-berlin.de, qurator@sbb.spk-berlin.de",
            "name": "dinglehopper",
            "url": "UNKNOWN"
        },
        "url": "https://github.com/qurator-spk/dinglehopper"
    }
]
